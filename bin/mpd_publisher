#!/usr/bin/env ruby
$:.unshift File.join(File.dirname(__FILE__), '../lib')
require 'ruby-mpd'
require 'eventmachine'
require 'faye'
require 'mpd_info'
require 'logger'

$stdout.sync = true

FAYE_SERVER_URL = ENV['FAYE_SERVER_URL'] || 'http://localhost:9292/faye'
FAYE_CONNECTION_ERROR = 'Faye connection timeout, is Faye running?'

MPD_HOST = ENV['MPD_HOST'] || 'localhost'
MPD_PORT = ENV['MPD_PORT'] || 6600
MPD_CONNECTION_TIMEOUT = "MPD connection timeout, is MPD running?"
MPD_CONNECTION_REFUSED = "MPD connection refused, is MPD running?"

EM.run {

  $logger = Logger.new STDOUT
  $logger.level = Logger::INFO
  $logger.formatter = proc do |severity, datetime, progname, msg|
    "#{datetime}: [#{severity}] #{msg}\n"
  end

  trap('INT') do
    puts "Exiting"
    $mpd.disconnect if $mpd.connected?
    exit 0
  end

  $mpd = MPD.new MPD_HOST, MPD_PORT

  $mpd.on :song do |song|
    $logger.info "MPD - #{song.artist} - #{song.title}"
    $faye.publish('/first-sin/mpd', { info: $mpd.info, action: "mpd" } )
  end

  $mpd.on :state do |state|
    $logger.info "MPD - #{state}"
    $faye.publish('/first-sin/mpd', { info: $mpd.info, action: "mpd" } )
  end

  begin
    $mpd.connect true
    $logger.info "MPD: connected, version #{$mpd.version}"
  rescue Errno::ETIMEDOUT => error
    abort MPD_CONNECTION_TIMEOUT
  rescue Errno::ECONNREFUSED => error
    abort MPD_CONNECTION_REFUSED
  end

  $faye = Faye::Client.new(FAYE_SERVER_URL)
  $faye.connect
  $logger.info "Faye: #{$faye.state.downcase}"

  EM.add_timer(10) do
    abort FAYE_CONNECTION_ERROR unless $faye.state == :CONNECTED
    $logger.info "Faye: #{$faye.state.downcase}"
  end
}

